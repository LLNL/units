version: 2
aliases:
  - &setup_units
    name: setup_units
    environment:
    command: |
      mkdir -p build
      cd build
      eval cmake .. ${CMAKE_FLAGS}
      make -j 4

  - &run_units
    name: run_units
    environment:
    command: |
      mkdir -p build
      cd build
      eval cmake .. ${CMAKE_FLAGS} -DUNITS_ENABLE_ERROR_ON_WARNINGS=ON
      make -j 4
      ctest --verbose

  - &run_fuzz
    name: run_fuzz
    environment:
    command: |
      mkdir -p build
      cd build
      eval cmake .. ${CMAKE_FLAGS} -DUNITS_BUILD_FUZZ_TARGETS=ON -DUNITS_ENABLE_TESTS=OFF -DUNITS_INSTALL=OFF -DUNITS_BASE_TYPE=std::uint64_t
      make -j 4
      make QUICK_RAW_FUZZ

  - &run_installer_tests
    name: run_installer_tests
    command: |
      cd build
      make install
      ctest -V -R find-package-tests

  - &run_coverage
    name: run_code_coverage
    command: |
      mkdir -p build
      cd build
      cmake ..
      eval cmake .. -DCMAKE_BUILD_TYPE=Coverage ${CMAKE_FLAGS}
      make -j 4
      eval cmake --build . --target UNITS_coverage
      ctest --output-on-failure
      lcov --directory . --capture --output-file coverage.info # capture coverage info
      lcov --remove coverage.info '*/tests/*' '*/examples/*' '*gtest*' '*gmock*' '/usr/*' --output-file coverage.info # filter out system
      lcov --list coverage.info #debug info
      # Uploading report to CodeCov
      bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"

jobs:
  unitsTSan:
    docker:
      - image: helics/buildenv:sanitizers
    environment:
      CMAKE_FLAGS: '-DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_FLAGS="-fsanitize=thread -stdlib=libc++ -L/root/develop/libcxx_tsan/lib -lc++abi -I/root/develop/libcxx_tsan/include -I/root/develop/libcxx_tsan/include/c++/v1 -Wno-unused-command-line-argument -g -O1 -Wl,-rpath=/root/develop/libcxx_tsan/lib"  '
      TSAN_OPTIONS: 'second_deadlock_stack=1'

    steps:
      - checkout
      - run: *run_units

  unitsASan:
    docker:
      - image: helics/buildenv:sanitizers
    environment:
      CMAKE_FLAGS: '-DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_FLAGS="-fsanitize=undefined,address -fsanitize-address-use-after-scope -stdlib=libc++ -L/root/develop/libcxx_asan/lib -lc++abi -I/root/develop/libcxx_asan/include -I/root/develop/libcxx_asan/include/c++/v1 -Wno-unused-command-line-argument -fno-omit-frame-pointer -g -O1 -Wl,-rpath=/root/develop/libcxx_asan/lib -fsanitize-blacklist=/root/project/.circleci/asan_blacklist.txt"  '
      LSAN_OPTIONS: 'suppressions=/root/project/.circleci/leak_suppression.txt'
      UBSAN_OPTIONS: 'print_stacktrace=1'

    steps:
      - checkout
      - run: *run_units

  unitsMSan:
    docker:
      - image: helics/buildenv:sanitizers
    environment:
      CMAKE_FLAGS: '-DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_FLAGS="-fsanitize=memory -stdlib=libc++ -L/root/develop/libcxx_msan/lib -lc++abi -I/root/develop/libcxx_msan/include -I/root/develop/libcxx_msan/include/c++/v1 -Wno-unused-command-line-argument -fno-omit-frame-pointer -g -O1 -Wl,-rpath=/root/develop/libcxx_msan/lib" '

    steps:
      - checkout
      - run: *run_units

  unitsFuzz:
    docker:
      - image: helics/buildenv:clang-builder8

    environment:
      CMAKE_FLAGS: '-DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_COMPILER_FORCED=ON -DCMAKE_CXX_FLAGS="-g -O1 -fsanitize=fuzzer,undefined,address" '
      UBSAN_OPTIONS: 'print_stacktrace=1'
    steps:
      - checkout
      - run: *run_fuzz
      - store_artifacts:
          path: /root/project/build/FuzzTargets/units_fail_string_artifact.txt
      - store_artifacts:
          path: /root/project/build/FuzzTargets/units_fail_measurement_artifact.txt

  unitsInstall:
    docker:
      - image: helics/buildenv:builder
    environment:
      CMAKE_FLAGS: '-DUNITS_ENABLE_TESTS=ON -DUNITS_INSTALL_PACKAGE_TESTS=ON -DUNITS_BUILD_SHARED_LIBRARY=ON'
    steps:
      - checkout
      - run: *setup_units
      - run: *run_installer_tests
  unitsCoverage:
    docker:
      - image: helics/buildenv:gcc7-coverage
    environment:
      CMAKE_FLAGS: '-DUNITS_ENABLE_TESTS=ON -DCMAKE_CXX_STANDARD=14'
    steps:
      - checkout
      - run: *run_coverage

workflows:
  version: 2
  units_test:
    jobs:
      - unitsMSan
      - unitsASan
      - unitsTSan
      - unitsInstall
      - unitsFuzz
      - unitsCoverage
